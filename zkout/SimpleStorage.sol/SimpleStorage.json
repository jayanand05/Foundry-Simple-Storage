{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[9]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_2[0], r3, r5\n\tjump.gt\t@.BB0_9\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.eq\t@.BB0_12\n\tsub.s!\t@CPI0_7[0], r3, r1\n\tjump.eq\t@.BB0_27\n\tsub.s!\t@CPI0_8[0], r3, r1\n\tjump.ne\t@.BB0_2\n.BB0_27:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_19[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_9:\n\tsub.s!\t@CPI0_3[0], r3, r5\n\tjump.eq\t@.BB0_29\n\tsub.s!\t@CPI0_4[0], r3, r5\n\tjump.eq\t@.BB0_32\n\tsub.s!\t@CPI0_5[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_9[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[8]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r3\n\tadd\tstack-[9], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t1, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t2, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r5\n\tadd\t@CPI0_14[0], r5, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.eq\t@.BB0_18\n.BB0_16:\n\tadd\t@CPI0_17[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_18[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_29:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_32:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_9[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_11[0], r3, r7\n\tjump.ge\t@.BB0_37\n\tadd\t31, r3, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_12[0], r7, r8\n\tjump.le\t@.BB0_39\n.BB0_37:\n\tadd\t@CPI0_17[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_18[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_18:\n\tadd\tr5, r0, stack-[9]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_20\n\tadd\tr6, r0, stack-[8]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_24\n\tadd\t160, r0, r1\n\tjump\t@.BB0_19\n.BB0_39:\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr5, r3, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r2, r2\n\tjump.le\t@.BB0_40\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_20:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_19:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r1\n\tadd\t@CPI0_16[0], r1, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[9]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\t64, r0, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t64, r2, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[6]\n\tst.1\tr1, r3\n\tadd\t96, r2, r2\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r1\n\tadd\tstack-[7], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[6], r0, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[8], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_40:\n\tadd\t32, r6, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_70\n\tadd\tr0, r0, r7\n.BB0_42:\n\tshl.s\t5, r7, r8\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_42\n.BB0_70:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_44\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_44:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_13[0], r1, r2\n\tjump.gt\t@.BB0_37\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tst.1.inc\tr1, r4, r6\n\tst.1\tr6, r5\n\tadd\t2, r0, r3\n\tsload\tr3, r2\n\tsub.s!\t@CPI0_9[0], r2, r4\n\tjump.gt\t@.BB0_37\n\tadd\t1, r2, r4\n\tsstore\tr3, r4\n\tst.1\t0, r3\n\tshl.s\t1, r2, r3\n\tadd\t@CPI0_14[0], r3, r4\n\tld.1\tr1, r8\n\tld.1.inc\tr8, r7, r9\n\tsub.s!\t@CPI0_9[0], r7, r1\n\tjump.gt\t@.BB0_37\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r11\n\tadd.ne\tr2, r0, r11\n\tsub.s!\t31, r11, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_16\n\tadd\tr9, r0, stack-[1]\n\tadd\tr8, r0, stack-[2]\n\tadd\tr7, r0, stack-[9]\n\tadd\tr4, r0, stack-[8]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr3, r0, stack-[5]\n\tadd\tr6, r0, stack-[6]\n\tadd\tr5, r0, stack-[7]\n\tadd\tr11, r0, stack-[3]\n\tsub.s!\t32, r11, r1\n\tjump.lt\t@.BB0_52\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_52\n.BB0_53:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_53\n.BB0_52:\n\tadd\tstack-[9], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_63\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[9], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_58\n\tadd\t32, r0, r2\n\tjump\t@.BB0_60\n.BB0_24:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_25:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_25\n\tadd\t192, r2, r1\n\tjump\t@.BB0_19\n.BB0_63:\n\tsub!\tstack-[9], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_65\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_65:\n\tadd\tstack-[9], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n\tjump\t@.BB0_54\n.BB0_58:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[2], r0, r6\n.BB0_59:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_59\n.BB0_60:\n\tsub.s!\tstack-[9], r3, r3\n\tjump.ge\t@.BB0_62\n\tadd\tstack-[9], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[2], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_62:\n\tadd\t1, r0, r1\n\tadd\tstack-[9], r0, r2\n\tshl.s\t1, r2, r2\n.BB0_54:\n\tor\tr2, r1, r1\n\tadd\tstack-[8], r0, r2\n\tsstore\tr2, r1\n\tadd\tstack-[5], r0, r1\n\tadd\t@CPI0_16[0], r1, r1\n\tadd\tstack-[6], r0, r2\n\tld.1\tr2, r2\n\tsstore\tr1, r2\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[8]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r3\n\tadd\tstack-[9], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t1, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin2:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end2:\n\nabi_decode_string:\n.func_begin3:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI3_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI3_0[0], r2, r6\n\tand\t@CPI3_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI3_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB3_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI3_1[0], r4, r1\n\tjump.ge\t@.BB3_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI3_2[0], r5, r8\n\tjump.gt\t@.BB3_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB3_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB3_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB3_12\n\tadd\tr0, r0, r7\n.BB3_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB3_9\n.BB3_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB3_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB3_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB3_3:\n\tadd\t@CPI3_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1616328220\nCPI0_3:\n\t.cell 1616328221\nCPI0_4:\n\t.cell 1870008129\nCPI0_5:\n\t.cell 2997641967\nCPI0_6:\n\t.cell 153753632\nCPI0_7:\n\t.cell 778358465\nCPI0_8:\n\t.cell 1139664046\nCPI0_9:\nCPI1_0:\nCPI3_2:\n\t.cell 18446744073709551615\nCPI0_10:\n\t.cell 2535301200456458802993406410752\nCPI0_11:\nCPI3_1:\n\t.cell 18446744073709551616\nCPI0_12:\n\t.cell 18446744073709551487\nCPI0_13:\n\t.cell 18446744073709551551\nCPI0_14:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403022\nCPI0_15:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_16:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403023\nCPI0_17:\nCPI1_1:\nCPI3_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_18:\nCPI1_2:\nCPI3_4:\n\t.cell 2852213850513516153367582212096\nCPI0_19:\n\t.cell 2535301202817642044428229017600\nCPI3_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","methodIdentifiers":{"addPerson(string,uint256)":"6f760f41","favouriteNumber()":"43ede4ae","nameToFavouriteNumber(string)":"b2ac62ef","person(uint256)":"092a1820","retrieve()":"2e64cec1","store(uint256)":"6057361d"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.580a8fe5\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"favouriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToFavouriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"person\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"favouriteNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/SimpleStorage.sol\":{\"keccak256\":\"0x5abbbd50bb98eb5d2910b426b982c9a665cb51144f3d53689a574960c7812928\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7182ebf5fbd45cfc5982041fec12c0722ce4ec855b746200c52bce996dd86ddb\",\"dweb:/ipfs/QmR9hPb1N3bFonTgQuzGB458uJuiMuLEQdKwmrD4DruTVY\"]}},\"version\":1}","solc_version":"0.8.19","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 20:\"src/SimpleStorage.sol\"\nobject \"SimpleStorage_35285\" {\n    code {\n        {\n            /// @src 20:56:681  \"contract SimpleStorage {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_35285_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_35285_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 20:\"src/SimpleStorage.sol\"\n    object \"SimpleStorage_35285_deployed\" {\n        code {\n            {\n                /// @src 20:56:681  \"contract SimpleStorage {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x092a1820 {\n                        if callvalue() { revert(_3, _3) }\n                        let _4 := 32\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_3, _3) }\n                        let value := calldataload(_2)\n                        /// @src 20:264:286  \"People[] public person\"\n                        if iszero(lt(value, /** @src 20:56:681  \"contract SimpleStorage {...\" */ sload(/** @src 20:264:286  \"People[] public person\" */ 2)))\n                        {\n                            revert(/** @src 20:56:681  \"contract SimpleStorage {...\" */ _3, _3)\n                        }\n                        /// @src 20:264:286  \"People[] public person\"\n                        let slot, offset := storage_array_index_access_struct_People__dyn(value)\n                        /// @src 20:56:681  \"contract SimpleStorage {...\"\n                        let memPtr := mload(_1)\n                        let ret := _3\n                        let slotValue := sload(slot)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let updated_pos := add(memPtr, _4)\n                        let _5 := 1\n                        switch and(slotValue, _5)\n                        case 0 {\n                            mstore(updated_pos, and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _4)\n                        }\n                        case 1 {\n                            mstore(_3, slot)\n                            let dataPos := keccak256(_3, _4)\n                            let i := _3\n                            for { } lt(i, length) { i := add(i, _4) }\n                            {\n                                mstore(add(add(memPtr, i), _4), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(memPtr, i), _4)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let _6 := sload(/** @src 20:264:286  \"People[] public person\" */ add(slot, /** @src 20:56:681  \"contract SimpleStorage {...\" */ _5))\n                        let memPos := mload(_1)\n                        mstore(memPos, _1)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _1), length_1)\n                        copy_memory_to_memory_with_cleanup(updated_pos, add(memPos, 96), length_1)\n                        mstore(add(memPos, _4), _6)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                    }\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _7 := sload(_3)\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, _7)\n                        return(memPos_1, 32)\n                    }\n                    case 0x43ede4ae {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _8 := sload(_3)\n                        let memPos_2 := mload(_1)\n                        mstore(memPos_2, _8)\n                        return(memPos_2, 32)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        sstore(_3, calldataload(_2))\n                        return(_3, _3)\n                    }\n                    case 0x6f760f41 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        let offset_1 := calldataload(_2)\n                        let _9 := 0xffffffffffffffff\n                        if gt(offset_1, _9) { revert(_3, _3) }\n                        let value0 := abi_decode_string(add(_2, offset_1), calldatasize())\n                        let value_1 := calldataload(36)\n                        let memPtr_1 := mload(_1)\n                        let newFreePtr := add(memPtr_1, _1)\n                        if or(gt(newFreePtr, _9), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        mstore(_1, newFreePtr)\n                        mstore(memPtr_1, value0)\n                        let _10 := 32\n                        /// @src 20:387:417  \"People(_name, _favoriteNumber)\"\n                        let _11 := add(memPtr_1, /** @src 20:56:681  \"contract SimpleStorage {...\" */ _10)\n                        mstore(_11, value_1)\n                        let oldLen := sload(/** @src 20:375:381  \"person\" */ 0x02)\n                        /// @src 20:56:681  \"contract SimpleStorage {...\"\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _12 := 1\n                        sstore(/** @src 20:375:381  \"person\" */ 0x02, /** @src 20:56:681  \"contract SimpleStorage {...\" */ add(oldLen, _12))\n                        let slot_1, offset_2 := storage_array_index_access_struct_People__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, _3)\n                            revert(_3, 36)\n                        }\n                        let _13 := mload(memPtr_1)\n                        let newLen := mload(_13)\n                        if gt(newLen, _9)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _14 := extract_byte_array_length(sload(slot_1))\n                        if gt(_14, 31)\n                        {\n                            mstore(_3, slot_1)\n                            let data := keccak256(_3, _10)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, _10) { deleteStart := data }\n                            let _15 := add(data, shr(5, add(_14, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _15) { start := add(start, _12) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _10\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_3, slot_1)\n                            let dstPtr := keccak256(_3, _10)\n                            let i_1 := _3\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _10) }\n                            {\n                                sstore(dstPtr, mload(add(_13, srcOffset)))\n                                dstPtr := add(dstPtr, _12)\n                                srcOffset := add(srcOffset, _10)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_13, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot_1, add(shl(_12, newLen), _12))\n                        }\n                        default {\n                            let value_2 := _3\n                            if newLen\n                            {\n                                value_2 := mload(add(_13, srcOffset))\n                            }\n                            sstore(slot_1, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_12, newLen)))\n                        }\n                        sstore(add(slot_1, _12), mload(_11))\n                        let pos := mload(_1)\n                        let length_2 := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, _10), pos, length_2)\n                        let end := add(pos, length_2)\n                        mstore(end, _12)\n                        sstore(keccak256(pos, add(sub(end, pos), _10)), value_1)\n                        return(_3, _3)\n                    }\n                    case 0xb2ac62ef {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset_3 := calldataload(_2)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(_3, _3) }\n                        let value0_1 := abi_decode_string(add(_2, offset_3), calldatasize())\n                        let pos_1 := mload(_1)\n                        let length_3 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_3)\n                        let end_1 := add(pos_1, length_3)\n                        mstore(end_1, /** @src 20:121:176  \"mapping(string => uint256) public nameToFavouriteNumber\" */ 1)\n                        /// @src 20:56:681  \"contract SimpleStorage {...\"\n                        let _16 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                        let memPos_3 := mload(_1)\n                        mstore(memPos_3, _16)\n                        return(memPos_3, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_People__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 20:264:286  \"People[] public person\" */ 2)))\n                /// @src 20:56:681  \"contract SimpleStorage {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 20:264:286  \"People[] public person\" */ 2)\n                /// @src 20:56:681  \"contract SimpleStorage {...\"\n                slot := add(29102676481673041902632991033461445430619272659676223336789171408008386403022, shl(1, index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 20:56:681  \"contract SimpleStorage {...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 20:56:681  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 20:56:681  \"contract SimpleStorage {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 20:56:681  \"contract SimpleStorage {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 20:56:681  \"contract SimpleStorage {...\"\n                array := memPtr\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000813000a\"\n    }\n}\n","hash":"010000a33bee7c7af8be67160da2266858641c6f8c10e5c85b6c2d391bee51be","factoryDependencies":{},"id":20}